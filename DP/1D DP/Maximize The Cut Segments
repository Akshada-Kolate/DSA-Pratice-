
Recursion

class Solution
{
    public:
    int maximise(int n , int x, int y, int z ){
        if(n==0) return 0;
        if(n<0) return INT_MAX;
 
        int a= maximizeTheCuts(n-x,x,y,z) + 1;
        int b= maximizeTheCuts(n-y,x,y,z) + 1; 
        int c= maximizeTheCuts(n-z,x,y,z) + 1;
        int ans= max(a,max(b,c));
        if(ans <0) return 0;
        return ans ;
    }
    
    //Function to find the maximum number of cuts.
    int maximizeTheCuts(int n , int x, int y, int z)
    {  
        return maximise(n , x , y , z );
    }
};

Memorization


class Solution
{
    public:
    //Function to find the maximum number of cuts.
    int f(int n,int x, int y, int z,vector<int>&ans){
        int x1=INT_MIN,x2=INT_MIN,x3=INT_MIN;
        if(n==0)
            return 0;
        if(ans[n]!=-1)
            return ans[n];
        if(n-x>=0)
            x1 = f(n-x, x, y, z, ans);
        if(n-y>=0)
            x2 = f(n-y,x,y,z,ans);
        if(n-z>=0)
            x3 = f(n-z,x,y,z,ans);
        return ans[n] = 1+ max(x1,max(x2,x3));
    }
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        //Your code here
        vector<int>ans(n+1,-1);
        int a = f(n,x,y,z,ans);
        if(a<0)
            a =0;
        return a;
          
    }
};

Tabulation 

class Solution
{
    public:
    int solve(int l, int p, int q, int r){
    int dp[l + 1];
    memset(dp, -1, sizeof(dp));
    dp[0] = 0;
    for (int i = 0; i <= l; i++) {
        if (dp[i] == -1) continue;
        if (i + p <= l) dp[i + p] = max(dp[i + p], dp[i] + 1);
        if (i + q <= l) dp[i + q] = max(dp[i + q], dp[i] + 1);
        if (i + r <= l) dp[i + r] = max(dp[i + r], dp[i] + 1);
    }
    if (dp[l] == -1) dp[l] = 0;
    return dp[l];
}
    //Function to find the maximum number of cuts.
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        return solve(n,x,y,z);
    }
};
