Recursion TLE

int solve(int i,int j,int m,int n,vector<vector<int>>& matrix)
    {
        if(i<0 || j<0 || i>m || j>n) return INT_MAX;
        if(i == m) return matrix[i][j];
        
       return matrix[i][j] + min(solve(i+1,j-1,m,n,matrix),
           min(solve(i+1,j,m,n,matrix), solve(i+1,j+1,m,n,matrix)));
    }
    
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        int ans = INT_MAX;
        
        for(int j=0;j<n;j++)
        {
           ans = min(ans,solve(0,j,m-1,n-1,matrix));    
        }
        return ans;
    }
	
Memoization

int solve(int i,int j,int m,int n,vector<vector<int>>& matrix,
             vector<vector<int>> &dp)
    {
        if(i<0 || j<0 || i>m || j>n) return INT_MAX;
        if(i == m) return matrix[i][j];
        
        if(dp[i][j] != -1) return dp[i][j];
       
        return dp[i][j] = matrix[i][j] + min(solve(i+1,j-1,m,n,matrix,dp),
           min(solve(i+1,j,m,n,matrix,dp), solve(i+1,j+1,m,n,matrix,dp)));
    }
    
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        int ans = INT_MAX;
        
        vector<vector<int>> dp(m,vector<int>(n,-1));
        for(int j=0;j<n;j++)
        {
           ans = min(ans,solve(0,j,m-1,n-1,matrix,dp));    
        }
        return ans;
    }
Iterative DP

int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        
        vector<vector<int>> dp(m,vector<int>(n,-1));
        for(int j=0;j<n;j++)
        {
            dp[0][j] = matrix[0][j];
        }
        
        for(int i=1;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                // for oth col we dont have col-1
                if(j == 0)
                    dp[i][j] = matrix[i][j] + min(dp[i-1][j],dp[i-1][j+1]);
                
                else if(j == n-1)
                    dp[i][j] = matrix[i][j] + min(dp[i-1][j-1],dp[i-1][j]);
                
                else
                {
                    dp[i][j] = matrix[i][j] + min(dp[i-1][j-1],
                                                min(dp[i-1][j],dp[i-1][j+1]));
                }
            }
        }
        
        int ans = 1e9;
        // find min among last row
        for(int j=0;j<n;j++)
        {
            ans = min(ans,dp[m-1][j]);
        }
        return ans;
    }
