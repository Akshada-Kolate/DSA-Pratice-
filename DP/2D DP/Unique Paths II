1.Recursion

int m, n;
int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {        
	m = size(obstacleGrid), n = size(obstacleGrid[0]);    
	return solve(obstacleGrid, 0, 0);   
}

int solve(vector<vector<int> >& grid, int i, int j){
	if(i < 0 || j < 0 || i >= m || j >= n) return 0;          // bounds checking
	if(grid[i][j]) return 0;   // if there's obstacle, just return 0 and stop further exploration
	if(i == m - 1 && j == n - 1 && !grid[i][j]) return 1;     // if we have reached end cell, return 1 if there's no obstacle   
	return solve(grid, i + 1, j) + solve(grid, i, j + 1);     // explore the two choice we have at each cell
}

2.Memorization

class Solution {
public:
    int solve(vector<vector<int>>& nums , int n , int m , int i, int j , vector<vector<int>> dp){
       if( i >= m || j >= n) 
           return 0;   
        
        if(nums[i][j]) 
            return 0; 
        
        if(dp[i][j]!=-1)
            return dp[i][j];
        
        if(i == m - 1 && j == n - 1 && !nums[i][j])
            return 1; 
        
        return solve(nums, n, m ,i , j+1, dp) + solve(nums, n,m, i+1, j, dp);
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& nums) {
        int n=nums.size();
        int m=nums[0].size();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return solve(nums,n,m ,0, 0, dp);
    }
};


Tabulation 

class Solution {
public:
 
     int uniquePathsWithObstacles(vector<vector<int> > &grid) {
        if(grid[0][0]==1) return 0;
        int m = grid.size(), n = grid[0].size();   
        vector<vector<int>> dp(m, vector<int>(n));
        dp[0][0] = 1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j==0) continue;
                dp[i][j] = 0;
                if(grid[i][j]==1) continue;
                if(i>0) dp[i][j] += dp[i-1][j];
                if(j>0) dp[i][j] += dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
};
