Recursion 

int solve(int W, int wt[], int val[], int i){
        if(i==0){
            if(wt[0]<=W){
                return val[i];
            }
            return 0;
        }
        int donotTake = 0 + solve(W , wt , val , i-1);
        int take = INT_MIN;
        if(wt[i]<W){
            take = val[i] + solve(W-wt[i] , wt , val , i-1);
        }
        return max(take , donotTake);
        
    }
    

    int knapSack(int W, int wt[], int val[], int n) 
    { 
        return solve(W , wt , val , n-1 );
    }
    
    
    Memorization
    
     int solve(int W, int wt[], int val[], int i , vector<vector<int>>& dp ){
        if(i==0){
            if(wt[0]<=W){
                return val[0];
            }
            return 0;
        }
        if(dp[i][W]!=-1) return dp[i][W];
        
        int donotTake = 0 + solve(W , wt , val , i-1 ,  dp);
        int take = INT_MIN;
        if(wt[i]<=W){
            take = val[i] + solve(W-wt[i] , wt , val , i-1 , dp);
        }
        return  dp[i][W] = max(take , donotTake);
        
    }
    

    int knapSack(int W, int wt[], int val[], int n) 
    { 
        vector<vector<int>> dp(n, vector<int>(W+1,-1));
        return solve(W , wt , val , n-1  , dp);
    }
    
    Tabulation 
    
    
    int knapSack(int W, int wt[], int val[], int n) 
    {   
       vector<vector<int>> dp(n,vector<int>(W+1,0));
    
    //Base Condition
    
    for(int i=wt[0]; i<=W; i++){
        dp[0][i] = val[0];
    }
    
    for(int ind =1; ind<n; ind++){
        for(int cap=0; cap<=W; cap++){
            
            int notTaken = 0 + dp[ind-1][cap];
            
            int taken = INT_MIN;
            if(wt[ind] <= cap)
                taken = val[ind] + dp[ind-1][cap - wt[ind]];
                
            dp[ind][cap] = max(notTaken, taken);
        }
    }
    
    return dp[n-1][W];
       
    }
