Recursive.

int recursive(vector<vector<char>>& matrix) {
        if (matrix.empty()) return 0;
        
        int res = 0;
        for(int i = 0; i < matrix.size(); ++i) {
            for(int j = 0; j < matrix[0].size(); ++j) {
                res = max(res, helper(matrix, i, j));
            }
        }
        return res * res;
    }
    
    // Return the area of maximum square with (i, j) as upper-left corner.
    int helper(vector<vector<char>>& matrix, int i, int j) {
        if (i >= matrix.size() || j >= matrix[0].size()) return 0;
        if (matrix[i][j] == '0') return 0;
        return min(min(helper(matrix, i, j+1), helper(matrix, i+1, j)), 
                   helper(matrix, i+1, j+1)) + 1;
    }
    
    Memoization
    
    public:
    int solve(vector<vector<char>>& matrix , int i, int j , vector<vector<int>>& dp ){
          if (i >= matrix.size() || j >= matrix[0].size()) 
              return 0;
        
        if(dp[i][j]!=-1)
            return dp[i][j];

        if (matrix[i][j] == '0') 
            return 0;
        
        int right= solve(matrix ,i, j+1 , dp);
        int diagonal = solve(matrix, i+1, j+1 , dp);
        int down = solve(matrix , i, j+1 , dp);
        
       dp[i][j] =  min(min(right , diagonal ), down ) + 1;
        return dp[i][j];
    }
    
    int maximalSquare(vector<vector<char>>& matrix) {
     if (matrix.empty())
         return 0;
        int n=matrix.size();
        int m=matrix[0].size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1)) ;
        int res = 0;
        for(int i = 0; i <n; ++i) {
            for(int j = 0; j < m; ++j) {
                res = max(res, solve(matrix, i, j , dp));
              
            }
        }
        return res*res;
    }
};


class Solution {
public:
    
    int maximalSquare(vector<vector<char>>& matrix) {
     if (matrix.empty())
         return 0;
        
        int n=matrix.size();
        int m=matrix[0].size();
        
        vector<vector<int>> dp(n+1,vector<int>(m+1,0)) ;
        int res = 0;
        
     for(int i=1;i<=n;++i){
            for(int j=1;j<=m;++j){
                //we found the 1 in our binary matrix 
                if(matrix[i-1][j-1]=='1'){
                    dp[i][j] = min({dp[i-1][j-1], dp[i-1][j], dp[i][j-1]})+ 1;
                    res=max(res,dp[i][j]);
                }
            }
        }
        return res*res;
    }
};
