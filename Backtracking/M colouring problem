class Solution{
public:
    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
    bool isSafe(int node,bool graph[101][101],int currcolor,vector<int>&color,int n){
       for(int k=0;k<n;k++){
           if(k!=node and graph[k][node]!=0 and color[k]==currcolor){
               return false;
           }
       }
       return true;
   }
   bool solve(int node,bool graph[101][101],vector<int>&color,int m,int n){
       if(node==n){
           return true;
       }
       for(int i=1;i<=m;i++){
           if(isSafe(node,graph,i,color,n)){
               color[node]=i;
               if(solve(node+1,graph,color,m,n)){
                   return true;
               }
               color[node]=0;
           }
       }
       return false;
   }
   bool graphColoring(bool graph[101][101], int m, int n) {
       // your code here
       vector<int>color(n,0);
       if(solve(0,graph,color,m,n)){
           return true;
       }
       return false;
   }
};
