class Solution 
{
    public:
    bool isSafe(int grid[N][N] ,int r , int c , int num){
        for(int i=0;i<9;i++){
            if(grid[r][i]==num){
                return false;
            }
        }
        for(int i=0;i<9;i++){
            if(grid[i][c]==num){
                return false;
            }
        }
        int rowstart= r-r%3;
        int colstart = c-c%3;
        
        for (int i = 0; i < 3; i++){
            for (int j = 0; j < 3; j++){
                if (grid[i + rowstart][j + colstart ] == num)
                    return false;
            }
        }
        return true;
    }
    bool solve(int grid[N][N] ,int r , int c){
        if(r==N -1 && c==N){
            return true;
        }
        if(c==N){
            r++;
            c=0;
        }
        if(grid[r][c]>0){
            return solve(grid, r, c+1);
        }
        for(int i=1;i<=9;i++){
            if(isSafe(grid, r,c,i)){
                grid[r][c]=i;
                if(solve(grid, r,c+1)){
                    return true;
                }
            }
            grid[r][c]=0;
        }
        return false ;
    }
    
    bool SolveSudoku(int grid[N][N]) { 
        
        if(solve( grid , 0 , 0) ){
            return true;
        }
        return false;
    }
    
    //Function to print grids of the Sudoku.
    void printGrid (int grid[N][N]) {
        for (int i = 0; i < N; i++){
            for (int j = 0; j < N; j++)
                cout << grid[i][j] << " ";
        }
    }
    };
