class Solution {
public:
    int moves[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };   // all the moves available to us - top, down, left, right
    int solve(vector<vector<int>>& mat, int i, int j){
	int MAX = 1;  
	for(int k = 0; k < 4; k++){
		int new_i = i + moves[k][0], new_j = j + moves[k][1];
		
		if(new_i < 0 || new_j < 0 || new_i >= size(mat) || new_j >= size(mat[0]) || mat[new_i][new_j] <= mat[i][j]) continue;
		
		MAX = max(MAX, 1 + solve(mat, new_i, new_j));
	}         
	return MAX;
}
    int longestIncreasingPath(vector<vector<int>>& matrix) {
       int maxPath = 1; 
	for(int i = 0; i < matrix.size(); i++){
        for(int j = 0; j < matrix[0].size(); j++)
			maxPath = max(maxPath, solve(matrix, i, j));	
    }	        
	return maxPath;
    }
};

Time Limit Exceeded

class Solution {
public:
   int dp[200][200]{}; // constraints are small enough that we can just set them to MAX
int maxPath, n, m;
int longestIncreasingPath(vector<vector<int>>& matrix) {
	maxPath = 0, n = size(matrix), m = size(matrix[0]);
	for(int i = 0; i < n; i++)
		for(int j = 0; j < m; j++)
			maxPath = max(maxPath, solve(matrix, i, j, -1));            
	return maxPath;
}
int solve(vector<vector<int>>& mat, int i, int j, int prev){
	if(i < 0 || j < 0 || i >= n || j >= m || mat[i][j] <= prev) return 0;
	if(dp[i][j]) return dp[i][j];
	return dp[i][j] = 1 + max({ solve(mat, i + 1, j, mat[i][j]),
							    solve(mat, i - 1, j, mat[i][j]),
							    solve(mat, i, j + 1, mat[i][j]),
							    solve(mat, i, j - 1, mat[i][j]) });  
}
};
